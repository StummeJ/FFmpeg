name: Build FFmpeg Windows x64 with CUDA

on:
  workflow_dispatch:
    inputs:
      enable_gpl:
        description: 'Enable GPL licensed code'
        required: false
        default: 'true'
        type: boolean
      enable_nonfree:
        description: 'Enable non-free code (required for some codecs)'
        required: false
        default: 'true'
        type: boolean
      enable_libx264:
        description: 'Enable x264 H.264 encoder'
        required: false
        default: 'true'
        type: boolean
      enable_libx265:
        description: 'Enable x265 HEVC encoder'
        required: false
        default: 'true'
        type: boolean
      enable_av1_codecs:
        description: 'Enable AV1 codecs (libaom, SVT-AV1, dav1d)'
        required: false
        default: 'true'
        type: boolean
      enable_libfdk_aac:
        description: 'Enable FDK AAC encoder'
        required: false
        default: 'true'
        type: boolean
      enable_libmp3lame:
        description: 'Enable MP3 LAME encoder'
        required: false
        default: 'true'
        type: boolean
      enable_additional_codecs:
        description: 'Enable additional codecs (VP8/VP9, Opus, Vorbis, WebP)'
        required: false
        default: 'true'
        type: boolean
      enable_cuda:
        description: 'Enable NVIDIA CUDA acceleration'
        required: false
        default: 'true'
        type: boolean
      cuda_version:
        description: 'CUDA version to use'
        required: false
        default: '12.6'
        type: string

jobs:
  build-windows-x64:
    runs-on: windows-latest
    timeout-minutes: 480
    
    steps:
    - name: Checkout FFmpeg
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-yasm
          mingw-w64-x86_64-python
          git
          wget
          unzip
    
    - name: Install CUDA Toolkit
      if: inputs.enable_cuda == 'true'
      shell: pwsh
      run: |
        try {
          # Try installing CUDA via direct download first
          $cudaVersion = "${{ inputs.cuda_version }}"
          Write-Host "Installing CUDA $cudaVersion..."
          
          # Use a more reliable CUDA installation method
          if ($cudaVersion -eq "12.6") {
            $installerUrl = "https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.76_windows.exe"
          } else {
            $installerUrl = "https://developer.download.nvidia.com/compute/cuda/${cudaVersion}.0/local_installers/cuda_${cudaVersion}.0_windows.exe"
          }
          
          Write-Host "Downloading CUDA installer from: $installerUrl"
          Invoke-WebRequest -Uri $installerUrl -OutFile "cuda_installer.exe" -TimeoutSec 1200
          
          Write-Host "Installing CUDA toolkit (this may take several minutes)..."
          $process = Start-Process -FilePath "cuda_installer.exe" -ArgumentList "-s" -PassThru -Wait
          
          if ($process.ExitCode -eq 0) {
            Write-Host "CUDA installation completed successfully"
            
            # Find CUDA installation directory
            $cudaPath = Get-ChildItem "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\" | Sort-Object Name -Descending | Select-Object -First 1
            $env:CUDA_PATH = $cudaPath.FullName
            $env:PATH = "$($cudaPath.FullName)\bin;$env:PATH"
            
            echo "CUDA_PATH=$($cudaPath.FullName)" >> $env:GITHUB_ENV
            echo "PATH=$($cudaPath.FullName)\bin;$env:PATH" >> $env:GITHUB_ENV
            echo "CUDA_INSTALLED=true" >> $env:GITHUB_ENV
          } else {
            throw "CUDA installer returned exit code: $($process.ExitCode)"
          }
        } catch {
          Write-Host "CUDA installation failed: $($_.Exception.Message)"
          Write-Host "Continuing build without CUDA acceleration..."
          echo "CUDA_FAILED=true" >> $env:GITHUB_ENV
        }
        
    - name: Setup build environment
      shell: msys2 {0}
      run: |
        # Create workspace
        mkdir -p /c/ffmpeg-build
        cd /c/ffmpeg-build
        
        # Download and build dependencies
        export PKG_CONFIG_PATH="/c/ffmpeg-build/lib/pkgconfig:$PKG_CONFIG_PATH"
        export PATH="/c/ffmpeg-build/bin:$PATH"
        export CFLAGS="-I/c/ffmpeg-build/include"
        export LDFLAGS="-L/c/ffmpeg-build/lib"
        
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV
        echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        
    - name: Build x264
      if: inputs.enable_libx264 == 'true'
      shell: msys2 {0}
      timeout-minutes: 30
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --host=x86_64-w64-mingw32 --enable-static --disable-shared --disable-opencl --prefix=/c/ffmpeg-build
        make -j$(nproc)
        make install
        
    - name: Build x265
      if: inputs.enable_libx265 == 'true'
      shell: msys2 {0}
      timeout-minutes: 45
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build/linux
        cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/c/ffmpeg-build -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DCMAKE_BUILD_TYPE=Release ../../source
        make -j$(nproc)
        make install
        
    - name: Build libvpx
      if: inputs.enable_additional_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 45
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        ./configure --target=x86_64-win64-gcc --disable-shared --enable-static --prefix=/c/ffmpeg-build --disable-examples --disable-tools --disable-docs --disable-unit-tests
        make -j$(nproc)
        make install
        
    - name: Build libaom (AV1)
      if: inputs.enable_av1_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 60
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://aomedia.googlesource.com/aom
        cd aom
        mkdir build && cd build
        cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/c/ffmpeg-build -DENABLE_SHARED=OFF -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_TESTDATA=OFF -DENABLE_TOOLS=OFF -DENABLE_EXAMPLES=OFF ..
        make -j$(nproc)
        make install
        
    - name: Build SVT-AV1
      if: inputs.enable_av1_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 60
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://gitlab.com/AOMediaCodec/SVT-AV1.git
        cd SVT-AV1
        mkdir build && cd build
        cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/c/ffmpeg-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_APPS=OFF -DBUILD_DEC=ON ..
        make -j$(nproc)
        make install
        
    - name: Build dav1d
      if: inputs.enable_av1_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 30
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build --prefix=/c/ffmpeg-build --default-library=static --buildtype=release
        ninja -C build
        ninja -C build install
        
    - name: Build FDK-AAC
      if: inputs.enable_libfdk_aac == 'true'
      shell: msys2 {0}
      timeout-minutes: 30
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git
        cd fdk-aac
        autoreconf -fiv
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static
        make -j$(nproc)
        make install
        
    - name: Build LAME MP3
      if: inputs.enable_libmp3lame == 'true'
      shell: msys2 {0}
      timeout-minutes: 20
      run: |
        cd /c/ffmpeg-build
        wget -O lame-3.100.tar.gz https://downloads.sourceforge.net/lame/lame-3.100.tar.gz
        tar -xzf lame-3.100.tar.gz
        cd lame-3.100
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static --disable-frontend
        make -j$(nproc)
        make install
        
    - name: Build Opus
      if: inputs.enable_additional_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 20
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://github.com/xiph/opus.git
        cd opus
        ./autogen.sh
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static
        make -j$(nproc)
        make install
        
    - name: Build Vorbis
      if: inputs.enable_additional_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 30
      run: |
        cd /c/ffmpeg-build
        # First build libogg
        git clone --depth 1 https://github.com/xiph/ogg.git
        cd ogg
        ./autogen.sh
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static
        make -j$(nproc)
        make install
        cd ..
        
        # Then build libvorbis
        git clone --depth 1 https://github.com/xiph/vorbis.git
        cd vorbis
        ./autogen.sh
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static
        make -j$(nproc)
        make install
        
    - name: Build WebP
      if: inputs.enable_additional_codecs == 'true'
      shell: msys2 {0}
      timeout-minutes: 20
      run: |
        cd /c/ffmpeg-build
        git clone --depth 1 https://chromium.googlesource.com/webm/libwebp
        cd libwebp
        ./autogen.sh
        ./configure --host=x86_64-w64-mingw32 --prefix=/c/ffmpeg-build --disable-shared --enable-static --disable-gl
        make -j$(nproc)
        make install
        
    - name: Setup CUDA headers and libraries
      if: inputs.enable_cuda == 'true' && env.CUDA_FAILED != 'true'
      shell: msys2 {0}
      run: |
        # Download and setup FFnvcodec headers
        cd /c/ffmpeg-build
        git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
        cd nv-codec-headers
        make install PREFIX=/c/ffmpeg-build
        
        # Copy CUDA libraries to our build directory if available
        mkdir -p /c/ffmpeg-build/lib
        if [ -d "/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{ inputs.cuda_version }}/lib/x64" ]; then
          cp "/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{ inputs.cuda_version }}/lib/x64"/*.lib /c/ffmpeg-build/lib/ || true
        else
          echo "CUDA libraries not found, disabling CUDA features"
          echo "CUDA_FAILED=true" >> $GITHUB_ENV
        fi
        
    - name: Configure FFmpeg
      shell: msys2 {0}
      timeout-minutes: 15
      run: |
        cd /home/runner/work/FFmpeg/FFmpeg
        
        export PKG_CONFIG_PATH="/c/ffmpeg-build/lib/pkgconfig"
        export PATH="/c/ffmpeg-build/bin:$PATH"
        export CFLAGS="-I/c/ffmpeg-build/include"
        export LDFLAGS="-L/c/ffmpeg-build/lib"
        
        # Build configure arguments
        CONFIGURE_ARGS=""
        
        # Basic options
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --disable-shared"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --pkg-config-flags=--static"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --extra-cflags=-static --extra-ldflags=-static"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --extra-libs=-lwinpthread"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --arch=x86_64"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --target-os=mingw32"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --cross-prefix=x86_64-w64-mingw32-"
        
        # License options
        if [ "${{ inputs.enable_gpl }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-gpl --enable-version3"
        fi
        
        if [ "${{ inputs.enable_nonfree }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-nonfree"
        fi
        
        # Video codecs
        if [ "${{ inputs.enable_libx264 }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libx264"
        fi
        
        if [ "${{ inputs.enable_libx265 }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libx265"
        fi
        
        if [ "${{ inputs.enable_additional_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libvpx"
        fi
        
        if [ "${{ inputs.enable_av1_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libaom"
        fi
        
        if [ "${{ inputs.enable_av1_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libsvtav1"
        fi
        
        if [ "${{ inputs.enable_av1_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libdav1d"
        fi
        
        if [ "${{ inputs.enable_additional_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libwebp"
        fi
        
        # Audio codecs
        if [ "${{ inputs.enable_libfdk_aac }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libfdk-aac"
        fi
        
        if [ "${{ inputs.enable_libmp3lame }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libmp3lame"
        fi
        
        if [ "${{ inputs.enable_additional_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libopus"
        fi
        
        if [ "${{ inputs.enable_additional_codecs }}" = "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libvorbis"
        fi
        
        # CUDA acceleration
        if [ "${{ inputs.enable_cuda }}" = "true" ] && [ "$CUDA_FAILED" != "true" ]; then
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-nvdec --enable-ffnvcodec"
          export PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{ inputs.cuda_version }}/bin:$PATH"
          echo "CUDA acceleration enabled"
        else
          echo "CUDA acceleration disabled"
        fi
        
        # Additional modern features
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-avisynth --enable-bzlib --enable-zlib"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-iconv --enable-libass --enable-libfreetype"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libfontconfig --enable-frei0r"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-filter=scale_cuda --enable-filter=yadif_cuda"
        
        echo "Configure arguments: $CONFIGURE_ARGS"
        
        ./configure $CONFIGURE_ARGS
        
    - name: Build FFmpeg
      shell: msys2 {0}
      timeout-minutes: 60
      run: |
        cd /home/runner/work/FFmpeg/FFmpeg
        make -j$(nproc)
        
    - name: Create portable package
      shell: msys2 {0}
      run: |
        cd /home/runner/work/FFmpeg/FFmpeg
        
        # Create package directory
        mkdir -p ffmpeg-windows-x64-cuda
        
        # Copy binaries
        cp ffmpeg.exe ffmpeg-windows-x64-cuda/ || { echo "ffmpeg.exe not found"; exit 1; }
        cp ffprobe.exe ffmpeg-windows-x64-cuda/ || { echo "ffprobe.exe not found"; exit 1; }
        cp ffplay.exe ffmpeg-windows-x64-cuda/ 2>/dev/null || echo "ffplay.exe not available (SDL not built)"
        
        # Copy required DLLs from MSYS2
        mkdir -p ffmpeg-windows-x64-cuda/dll
        
        # Function to copy DLL dependencies
        copy_deps() {
          local exe_file="$1"
          if [ -f "$exe_file" ]; then
            ldd "$exe_file" 2>/dev/null | grep mingw64 | awk '{print $3}' | while read dll; do
              if [ -f "$dll" ] && [ ! -f "ffmpeg-windows-x64-cuda/dll/$(basename "$dll")" ]; then
                cp "$dll" ffmpeg-windows-x64-cuda/dll/
                echo "Copied: $(basename "$dll")"
              fi
            done
          fi
        }
        
        # Copy dependencies for all executables
        copy_deps "ffmpeg.exe"
        copy_deps "ffprobe.exe"
        copy_deps "ffplay.exe"
        
        # Create batch files for easy execution
        cat > ffmpeg-windows-x64-cuda/ffmpeg.bat << 'EOF'
        @echo off
        set "PATH=%~dp0dll;%PATH%"
        "%~dp0ffmpeg.exe" %*
        EOF
        
        cat > ffmpeg-windows-x64-cuda/ffprobe.bat << 'EOF'
        @echo off
        set "PATH=%~dp0dll;%PATH%"
        "%~dp0ffprobe.exe" %*
        EOF
        
        if [ -f ffmpeg-windows-x64-cuda/ffplay.exe ]; then
          cat > ffmpeg-windows-x64-cuda/ffplay.bat << 'EOF'
        @echo off
        set "PATH=%~dp0dll;%PATH%"
        "%~dp0ffplay.exe" %*
        EOF
        fi
        
        # Get FFmpeg version information
        FFMPEG_VERSION=$(./ffmpeg.exe -version 2>/dev/null | head -n1 || echo "FFmpeg version unknown")
        
        # Create README
        cat > ffmpeg-windows-x64-cuda/README.txt << EOF
        FFmpeg Windows x64 Build with CUDA Support
        ==========================================
        
        Build Configuration:
        - GPL: ${{ inputs.enable_gpl }}
        - Non-free: ${{ inputs.enable_nonfree }}
        - x264: ${{ inputs.enable_libx264 }}
        - x265: ${{ inputs.enable_libx265 }}
        - AV1 codecs: ${{ inputs.enable_av1_codecs }} (libaom, SVT-AV1, dav1d)
        - FDK-AAC: ${{ inputs.enable_libfdk_aac }}
        - MP3 LAME: ${{ inputs.enable_libmp3lame }}
        - Additional codecs: ${{ inputs.enable_additional_codecs }} (VP8/VP9, Opus, Vorbis, WebP)
        - CUDA: ${{ inputs.enable_cuda }} (version: ${{ inputs.cuda_version }})
        
        Usage:
        - Run ffmpeg.bat, ffprobe.bat, or ffplay.bat for the respective tools
        - Or add the 'dll' folder to your PATH and run the .exe files directly
        
        Built on: $(date)
        $FFMPEG_VERSION
        
        System Requirements:
        - Windows 11 x64 or Windows 10 x64 (version 1909 or later)
        - For CUDA features: NVIDIA GPU with CUDA support
        
        Note: This build is statically linked and self-contained.
        No additional installations are required on the target system.
        EOF
        
        # Display build info
        echo "=== FFmpeg Build Information ==="
        ./ffmpeg.exe -version 2>/dev/null || echo "Failed to get FFmpeg version"
        echo ""
        echo "=== Package Contents ==="
        ls -la ffmpeg-windows-x64-cuda/
        echo ""
        echo "=== DLL Dependencies ==="
        ls -la ffmpeg-windows-x64-cuda/dll/
        echo "================================="
        
        # Install 7-Zip if not available
        pacman -S --noconfirm mingw-w64-x86_64-7zip 2>/dev/null || echo "7-Zip already available"
        
        # Create archive
        7z a -tzip ffmpeg-windows-x64-cuda.zip ffmpeg-windows-x64-cuda/
        
        # Verify archive was created
        if [ -f ffmpeg-windows-x64-cuda.zip ]; then
          echo "Archive created successfully: ffmpeg-windows-x64-cuda.zip"
          ls -lh ffmpeg-windows-x64-cuda.zip
        else
          echo "Failed to create archive"
          exit 1
        fi
        
    - name: Upload FFmpeg Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-windows-x64-cuda
        path: ffmpeg-windows-x64-cuda.zip
        retention-days: 30
        
    - name: Display Build Summary
      shell: msys2 {0}
      run: |
        cd /home/runner/work/FFmpeg/FFmpeg
        echo "=== Build Summary ==="
        echo "FFmpeg version: $(./ffmpeg.exe -version | head -n1)"
        echo "Build date: $(date)"
        echo "Enabled features:"
        echo "- GPL: ${{ inputs.enable_gpl }}"
        echo "- Non-free: ${{ inputs.enable_nonfree }}"
        echo "- CUDA: ${{ inputs.enable_cuda }} (v${{ inputs.cuda_version }})"
        echo "- x264: ${{ inputs.enable_libx264 }}"
        echo "- x265: ${{ inputs.enable_libx265 }}"
        echo "- AV1 codecs: ${{ inputs.enable_av1_codecs }}"
        echo "- FDK-AAC: ${{ inputs.enable_libfdk_aac }}"
        echo "- MP3: ${{ inputs.enable_libmp3lame }}"
        echo "- Additional codecs: ${{ inputs.enable_additional_codecs }}"
        echo ""
        echo "Artifact: ffmpeg-windows-x64-cuda.zip"
        echo "Size: $(du -h ffmpeg-windows-x64-cuda.zip | cut -f1)"
        echo "====================="