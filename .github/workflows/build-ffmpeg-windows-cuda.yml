name: build-ffmpeg-windows-cuda13-full

on:
  workflow_dispatch:
    inputs:
      ffmpeg_ref:
        description: "FFmpeg ref (tag/branch/commit), e.g. n8.0 or master"
        default: "n8.0"
        required: true
      # Core feature toggles (default ON)
      enable_gpl:
        type: choice
        description: Enable --enable-gpl
        default: "true"
        options: ["true","false"]
      enable_version3:
        type: choice
        description: Enable --enable-version3
        default: "true"
        options: ["true","false"]
      enable_nonfree:
        type: choice
        description: "Enable --enable-nonfree (needed for fdk-aac). Default off for licensing."
        default: "false"
        options: ["true","false"]

      # CUDA / NVIDIA
      enable_cuda_stack:
        type: choice
        description: "Enable CUDA/NVENC/NVDEC/CUVID + libnpp"
        default: "true"
        options: ["true","false"]

      # Graphics / upscalers
      enable_vulkan:
        type: choice
        default: "true"
        options: ["true","false"]
        description: Enable Vulkan loader
      enable_libplacebo:
        type: choice
        default: "true"
        options: ["true","false"]
        description: Enable libplacebo (EWA Lanczos/FSRCNNX/deband)

      # Video codecs
      enable_x264:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_x265:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_svtav1:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_aom:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_vpx:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_openjpeg:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_dav1d:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_vmaf:
        type: choice
        default: "true"
        options: ["true","false"]

      # Images / DSP
      enable_webp:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_jxl:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_zimg:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_soxr:
        type: choice
        default: "true"
        options: ["true","false"]

      # Audio codecs
      enable_opus:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_vorbis:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_lame:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_fdk_aac:
        type: choice
        description: "Enable libfdk-aac (requires nonfree)"
        default: "false"
        options: ["true","false"]

      # Subtitles / text
      enable_libass:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_freetype:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_harfbuzz:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_fribidi:
        type: choice
        default: "true"
        options: ["true","false"]

      # Networking & IO
      enable_srt:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_rist:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_ssh:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_zmq:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_bluray:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_modplug:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_openmpt:
        type: choice
        default: "true"
        options: ["true","false"]

      # TLS / XML
      enable_gnutls:
        type: choice
        default: "true"
        options: ["true","false"]
      enable_libxml2:
        type: choice
        default: "true"
        options: ["true","false"]

      # AviSynth/VapourSynth (frameservers)
      enable_avisynth:
        type: choice
        default: "true"
        options: ["true","false"]

  build:
    runs-on: windows-2022
    env:
      FFMPEG_REF: ${{ github.event.inputs.ffmpeg_ref || 'n8.0' }}
      PREFIX: C:\ffmpeg-prefix
      PKG: C:\ffmpeg-package
      CUDA_PATH: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v13.0"
      CC: clang
      CXX: clang++
      AR: llvm-ar
      NM: llvm-nm
      RANLIB: llvm-ranlib
      LD: lld
      MSYS2_PATH_TYPE: minimal

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install MSYS2 + toolchain & libs
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >
            base-devel
            git
            zip
            unzip
            wget
            python
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-lld
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-ntldd-git
            # codecs / dsp
            mingw-w64-x86_64-x264
            mingw-w64-x86_64-x265
            mingw-w64-x86_64-libvpx
            mingw-w64-x86_64-aom
            mingw-w64-x86_64-svt-av1
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libjxl
            mingw-w64-x86_64-zimg
            mingw-w64-x86_64-soxr
            mingw-w64-x86_64-dav1d
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-libvmaf
            # audio
            mingw-w64-x86_64-opus
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-libogg
            mingw-w64-x86_64-lame
            mingw-w64-x86_64-fdk-aac
            # text / subs
            mingw-w64-x86_64-libass
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-fribidi
            mingw-w64-x86_64-harfbuzz
            # networking / io
            mingw-w64-x86_64-libsrt
            mingw-w64-x86_64-librist
            mingw-w64-x86_64-libssh
            mingw-w64-x86_64-libzmq
            mingw-w64-x86_64-libbluray
            mingw-w64-x86_64-libmodplug
            mingw-w64-x86_64-libopenmpt
            # vulkan / placebo
            mingw-w64-x86_64-vulkan-loader
            mingw-w64-x86_64-shaderc
            mingw-w64-x86_64-libplacebo
            # avisynth
            mingw-w64-x86_64-avisynthplus

      - name: Install CUDA 13 Toolkit (toolkit + NPP)
        shell: powershell
        run: |
          choco install cuda --version=13.0.0 -y --no-progress
          if (!(Test-Path "${{ env.CUDA_PATH }}\include\npp.h")) { throw "CUDA 13 Toolkit not found at $env:CUDA_PATH" }

      - name: Install NVCodec headers (ffnvcodec)
        shell: msys2 {0}
        run: |
          set -e
          git clone --depth=1 https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
          cd nv-codec-headers
          make PREFIX=/mingw64 install

      - name: Fetch FFmpeg
        shell: msys2 {0}
        run: |
          set -e
          git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-src
          cd ffmpeg-src
          git fetch --all --tags
          git checkout "${FFMPEG_REF}"

      - name: Configure FFmpeg (compose flags from inputs)
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
          PATH: /mingw64/bin:/usr/bin:$PATH

          ENABLE_GPL:       ${{ github.event.inputs.enable_gpl }}
          ENABLE_V3:        ${{ github.event.inputs.enable_version3 }}
          ENABLE_NONFREE:   ${{ github.event.inputs.enable_nonfree }}

          ENABLE_CUDA:      ${{ github.event.inputs.enable_cuda_stack }}

          ENABLE_VULKAN:    ${{ github.event.inputs.enable_vulkan }}
          ENABLE_PLACEBO:   ${{ github.event.inputs.enable_libplacebo }}

          E_X264:           ${{ github.event.inputs.enable_x264 }}
          E_X265:           ${{ github.event.inputs.enable_x265 }}
          E_SVT:            ${{ github.event.inputs.enable_svtav1 }}
          E_AOM:            ${{ github.event.inputs.enable_aom }}
          E_VPX:            ${{ github.event.inputs.enable_vpx }}
          E_WEBP:           ${{ github.event.inputs.enable_webp }}
          E_JXL:            ${{ github.event.inputs.enable_jxl }}
          E_ZIMG:           ${{ github.event.inputs.enable_zimg }}
          E_SOXR:           ${{ github.event.inputs.enable_soxr }}
          E_OPUS:           ${{ github.event.inputs.enable_opus }}
          E_VORBIS:         ${{ github.event.inputs.enable_vorbis }}
          E_LAME:           ${{ github.event.inputs.enable_lame }}
          E_FDK:            ${{ github.event.inputs.enable_fdk_aac }}
          E_OPENJPEG:       ${{ github.event.inputs.enable_openjpeg }}
          E_DAV1D:          ${{ github.event.inputs.enable_dav1d }}
          E_VMAF:           ${{ github.event.inputs.enable_vmaf }}

          E_ASS:            ${{ github.event.inputs.enable_libass }}
          E_FT:             ${{ github.event.inputs.enable_freetype }}
          E_HB:             ${{ github.event.inputs.enable_harfbuzz }}
          E_FB:             ${{ github.event.inputs.enable_fribidi }}

          E_SRT:            ${{ github.event.inputs.enable_srt }}
          E_RIST:           ${{ github.event.inputs.enable_rist }}
          E_SSH:            ${{ github.event.inputs.enable_ssh }}
          E_ZMQ:            ${{ github.event.inputs.enable_zmq }}
          E_BLURAY:         ${{ github.event.inputs.enable_bluray }}
          E_MODPLUG:        ${{ github.event.inputs.enable_modplug }}
          E_OPENMPT:        ${{ github.event.inputs.enable_openmpt }}

          E_GNUTLS:         ${{ github.event.inputs.enable_gnutls }}
          E_XML2:           ${{ github.event.inputs.enable_libxml2 }}
          E_AVISYNTH:       ${{ github.event.inputs.enable_avisynth }}
        run: |
          set -e
          cd ffmpeg-src

          CONFIG_OPTS="--prefix=${PREFIX//\\//} --target-os=mingw32 --arch=x86_64 --enable-static --disable-shared --disable-w32threads --enable-pic"

          if [ "$ENABLE_GPL" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-gpl"; fi
          if [ "$ENABLE_V3" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-version3"; fi
          if [ "$ENABLE_NONFREE" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-nonfree"; fi

          # CUDA stack
          if [ "$ENABLE_CUDA" = "true" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --enable-ffnvcodec --enable-nvenc --enable-nvdec --enable-cuvid --enable-cuda-llvm --enable-libnpp"
            EXTRA_CFLAGS="-I${CUDA_PATH//\\//}/include"
            EXTRA_LDFLAGS="-L${CUDA_PATH//\\//}/lib/x64 -lcuda -lcudart -lnppc -lnppial -lnppicc -lnppicom -lnppidei -lnppif -lnppig -lnppist -lnppisu -lnppitc"
          fi

          # Graphics / upscalers
          if [ "$ENABLE_VULKAN" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-vulkan"; fi
          if [ "$ENABLE_PLACEBO" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-libplacebo --enable-libshaderc"; fi

          # Video codecs
          [ "$E_X264"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libx264"
          [ "$E_X265"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libx265"
          [ "$E_SVT"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libsvtav1"
          [ "$E_AOM"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libaom"
          [ "$E_VPX"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libvpx"
          [ "$E_OPENJPEG" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libopenjpeg"
          [ "$E_DAV1D" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libdav1d"
          [ "$E_VMAF"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libvmaf"

          # Images / DSP
          [ "$E_WEBP"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libwebp"
          [ "$E_JXL"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libjxl"
          [ "$E_ZIMG"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libzimg"
          [ "$E_SOXR"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libsoxr"

          # Audio
          [ "$E_OPUS"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libopus"
          [ "$E_VORBIS"= "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libvorbis"
          [ "$E_LAME"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libmp3lame"
          if [ "$E_FDK" = "true" ]; then CONFIG_OPTS="$CONFIG_OPTS --enable-libfdk-aac"; fi

          # Subtitles / text shaping
          [ "$E_ASS"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libass"
          [ "$E_FT"    = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libfreetype"
          [ "$E_HB"    = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libharfbuzz"
          [ "$E_FB"    = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libfribidi"

          # Networking / IO
          [ "$E_SRT"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libsrt"
          [ "$E_RIST"  = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-librist"
          [ "$E_SSH"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libssh"
          [ "$E_ZMQ"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libzmq"
          [ "$E_BLURAY"= "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libbluray"
          [ "$E_MODPLUG" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libmodplug"
          [ "$E_OPENMPT" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libopenmpt"

          # TLS / XML
          [ "$E_GNUTLS" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-gnutls"
          [ "$E_XML2"   = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-libxml2"

          # Frameservers
          [ "$E_AVISYNTH" = "true" ] && CONFIG_OPTS="$CONFIG_OPTS --enable-avisynth"

          echo "CONFIG_OPTS=$CONFIG_OPTS"
          CFLAGS="-O3 -pipe" LDFLAGS="-Wl,--dynamicbase -Wl,--nxcompat" \
          ./configure $CONFIG_OPTS ${EXTRA_CFLAGS:+--extra-cflags="$EXTRA_CFLAGS"} ${EXTRA_LDFLAGS:+--extra-ldflags="$EXTRA_LDFLAGS"}

      - name: Build & install
        shell: msys2 {0}
        run: |
          set -e
          cd ffmpeg-src
          make -j$(nproc)
          make install
          # strip for smaller exe
          x86_64-w64-mingw32-strip ${PREFIX//\\//}/bin/*.exe || true

      - name: Make self-contained package (bundle DLL deps incl. CUDA/Vulkan)
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $bin      = Join-Path $env:PREFIX "bin"
          $pkgBin   = Join-Path $env:PKG "bin"
          $pkgLic   = Join-Path $env:PKG "licenses"
          New-Item -Force -ItemType Directory -Path $pkgBin | Out-Null
          New-Item -Force -ItemType Directory -Path $pkgLic | Out-Null

          Copy-Item "$bin\ffmpeg.exe"  $pkgBin
          Copy-Item "$bin\ffprobe.exe" $pkgBin -ErrorAction SilentlyContinue
          if (Test-Path "$bin\ffplay.exe") { Copy-Item "$bin\ffplay.exe" $pkgBin }

          function Copy-Dll([string]$path) {
            if (Test-Path $path) {
              $dst = Join-Path $pkgBin ([IO.Path]::GetFileName($path))
              if (-not (Test-Path $dst)) { Copy-Item $path $pkgBin }
            }
          }

          # Resolve DLL deps with ntldd
          $env:Path = "C:\msys64\mingw64\bin;$env:Path"
          Get-ChildItem $pkgBin\*.exe | ForEach-Object {
            $deps = & C:\msys64\mingw64\bin\ntldd.exe -R $_.FullName | Select-String -Pattern "=>\s+([A-Za-z]:\\[^ ]+\.dll)"
            foreach ($m in $deps) {
              $p = $m.Matches[0].Groups[1].Value
              Copy-Dll $p
            }
          }

          # Bundle CUDA / NPP runtime DLLs (CUDA 13)
          Get-ChildItem "$env:CUDA_PATH\bin\cudart64_*.dll" -ErrorAction SilentlyContinue | % { Copy-Dll $_.FullName }
          Get-ChildItem "$env:CUDA_PATH\bin\npp*.dll" -ErrorAction SilentlyContinue | % { Copy-Dll $_.FullName }
          # NVENC loader (if present in CUDA dir; otherwise it's provided by NVIDIA driver at runtime)
          Get-ChildItem "$env:CUDA_PATH\bin\nvEncodeAPI64*.dll" -ErrorAction SilentlyContinue | % { Copy-Dll $_.FullName }

          # Vulkan loader (for libplacebo)
          Copy-Dll "C:\msys64\mingw64\bin\vulkan-1.dll"

          # Licenses (bundle MSYS2 licenses dir)
          if (Test-Path "C:\msys64\mingw64\share\licenses") {
            Copy-Item "C:\msys64\mingw64\share\licenses" $pkgLic -Recurse -Force
          }

      - name: Zip artifact
        shell: powershell
        run: |
          $zip = "ffmpeg-windows-x64-cuda13-full-${{ env.FFMPEG_REF }}.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "${{ env:PKG }}\*" -DestinationPath $zip
          Write-Host "Created $zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows-x64-cuda13-full-${{ env.FFMPEG_REF }}
          path: ffmpeg-windows-x64-cuda13-full-${{ env.FFMPEG_REF }}.zip
          retention-days: 14
